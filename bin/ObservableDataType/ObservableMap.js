"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ObservableVariable_1 = require("./ObservableVariable");
/**
 * 可观察改变Map
 */
class ObservableMap extends ObservableVariable_1.ObservableVariable {
    constructor(value) {
        super(value);
        //#endregion
        //#region 属性
        this._onAdd = new Set();
        this._onRemove = new Set();
        this._onUpdate = new Set();
        if (this !== value)
            if (Array.isArray(value))
                this._value = new Map(value);
    }
    static observe(value, path) {
        if (path === undefined) {
            return new ObservableMap(value);
        }
        else if ('string' === typeof path) {
            path = path.split('.');
        }
        for (let index = 0, end = path.length - 1; index < end; index++) {
            value = value[path[index]];
        }
        value[path[path.length - 1]] = new ObservableMap(value[path[path.length - 1]]);
    }
    /**
     * Map元素个数
     */
    get size() {
        return this._value.size;
    }
    //#endregion
    //#region toJSON
    toJSON() {
        return this.serializable ? [...this._value] : undefined;
    }
    on(event, callback) {
        switch (event) {
            case 'update':
                this._onUpdate.add(callback);
                break;
            case 'beforeUpdate':
                this._onBeforeUpdate = callback;
                break;
            case 'add':
                this._onAdd.add(callback);
                break;
            case 'remove':
                this._onRemove.add(callback);
                break;
            default:
                super.on(event, callback);
                break;
        }
    }
    once(event, callback) {
        super.once(event, callback);
    }
    off(event, callback) {
        switch (event) {
            case 'update':
                callback ? this._onUpdate.delete(callback) : this._onUpdate.clear();
                break;
            case 'beforeUpdate':
                this._onBeforeUpdate = undefined;
                break;
            case 'add':
                callback ? this._onAdd.delete(callback) : this._onAdd.clear();
                break;
            case 'remove':
                callback ? this._onRemove.delete(callback) : this._onRemove.clear();
                break;
            default:
                super.off(event, callback);
                break;
        }
    }
    //#endregion
    //#region Map修改操作方法
    /**
     * 移除Map对象中的所有元素。
     */
    clear() {
        if (this.readonly)
            throw new Error(`尝试修改一个只读的 ${this.constructor.name}`);
        if (this._onRemove.size > 0) {
            this._value.forEach((value, key) => {
                this._value.delete(key);
                this._onRemove.forEach(callback => callback(value, key));
            });
        }
        else
            this._value.clear();
    }
    /**
     * 用于移除 Map 对象中指定的元素。
     */
    delete(key) {
        if (this.readonly)
            throw new Error(`尝试修改一个只读的 ${this.constructor.name}`);
        if (this._onRemove.size > 0) {
            if (this._value.has(key)) {
                const value = this._value.get(key);
                this._value.delete(key);
                this._onRemove.forEach(callback => callback(value, key));
                return true;
            }
            else
                return false;
        }
        else
            return this._value.delete(key);
    }
    /**
     * 为Map对象添加一个指定键（key）和值（value）的新元素。
     */
    set(key, value) {
        if (this.readonly)
            throw new Error(`尝试修改一个只读的 ${this.constructor.name}`);
        if (this._value.has(key)) {
            const oldValue = this._value.get(key);
            if (this._onBeforeUpdate !== undefined)
                if (this._onBeforeUpdate(key, value, oldValue, this._value) === false)
                    return this;
            this._value.set(key, value);
            this._onUpdate.forEach(callback => callback(value, oldValue, key));
        }
        else {
            this._value.set(key, value);
            this._onAdd.forEach(callback => callback(value, key));
        }
        return this;
    }
    //#endregion
    //#region Map读取操作方法
    /**
     * 返回一个新的包含 [key, value] 对的 Iterator 对象，返回的迭代器的迭代顺序与 Map 对象的插入顺序相同。
     */
    entries() {
        return this._value.entries();
    }
    /**
     * 以插入顺序对 Map 对象中的每一个键值对执行一次参数中提供的回调函数。
     */
    forEach(callbackfn, thisArg) {
        this._value.forEach(callbackfn, thisArg);
    }
    /**
     * 用来获取一个 Map 对象中指定的元素。
     */
    get(key) {
        return this._value.get(key);
    }
    /**
     * 返回一个bool值，用来表明map 中是否存在指定元素
     */
    has(key) {
        return this._value.has(key);
    }
    /**
     * 返回一个新的 Iterator 对象。它包含按照顺序插入Map对象中每个元素的key值。
     */
    keys() {
        return this._value.keys();
    }
    /**
     * 返回一个新的Iterator对象。它包含按顺序插入Map对象中每个元素的value值。
     */
    values() {
        return this._value.values();
    }
}
exports.ObservableMap = ObservableMap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
