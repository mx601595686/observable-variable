"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 可观察改变变量
 */
class ObservableVariable {
    constructor(value) {
        this._onSet = new Set();
        /**
         * 该变量是否是只读的，默认false
         */
        this.readonly = false;
        //#endregion
        //#region toJSON
        /**
         * 该变量是否允许toJSON，默认true
         */
        this.serializable = true;
        //确保不重复包裹变量
        if (value instanceof ObservableVariable) {
            /**
             * 如果造中使用了return，那么不管是父类还是子类的原型都将不会附加到该对象上
             * 构造函数也就退化成了普通方法
             * 子类构造中的this等于return的返回值
             */
            return value;
        }
        /**
         * 注意：如果要继承ObservableVariable，那么在子类的构造中
         * 在执行super(value)之后一定要判断一下 if(this === value)
         * 如果相等则说明是重复包裹，后面的代码则不应当执行
         */
        this._value = value;
    }
    static observe(value, path) {
        if (path === undefined) {
            return new ObservableVariable(value);
        }
        else if ('string' === typeof path) {
            path = path.split('.');
        }
        for (let index = 0, end = path.length - 1; index < end; index++) {
            value = value[path[index]];
        }
        value[path[path.length - 1]] = new ObservableVariable(value[path[path.length - 1]]);
    }
    get value() {
        return this._value;
    }
    set value(v) {
        if (this.readonly)
            throw new Error(`尝试修改一个只读的 ${this.constructor.name}`);
        if (this._onBeforeSet !== undefined)
            if (this._onBeforeSet(v, this._value, (value) => { v = value; return; }, this) === false)
                return;
        if (this._onSet.size > 0) {
            const oldValue = this._value;
            this._value = v;
            this._onSet.forEach(callback => callback(v, oldValue));
        }
        else
            this._value = v;
    }
    toJSON() {
        return this.serializable ? this._value : undefined;
    }
    on(event, callback) {
        switch (event) {
            case 'set':
                this._onSet.add(callback);
                break;
            case 'beforeSet':
                this._onBeforeSet = callback;
                break;
        }
    }
    once(event, callback) {
        const tempCallback = (...args) => { this.off(event, tempCallback); return callback(...args); };
        this.on(event, tempCallback);
    }
    off(event, callback) {
        switch (event) {
            case 'set':
                callback ? this._onSet.delete(callback) : this._onSet.clear();
                break;
            case 'beforeSet':
                this._onBeforeSet = undefined;
                break;
        }
    }
}
exports.ObservableVariable = ObservableVariable;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
