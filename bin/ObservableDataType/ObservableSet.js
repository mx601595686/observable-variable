"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ObservableVariable_1 = require("./ObservableVariable");
/**
 * 可观察改变集合
 */
class ObservableSet extends ObservableVariable_1.ObservableVariable {
    constructor(value) {
        super(value);
        //#endregion
        //#region 属性
        this._onAdd = new Set();
        this._onRemove = new Set();
        if (this !== value)
            if (Array.isArray(value))
                this._value = new Set(value);
    }
    static observe(value, path) {
        if (path === undefined) {
            return new ObservableSet(value);
        }
        else if ('string' === typeof path) {
            path = path.split('.');
        }
        for (let index = 0, end = path.length - 1; index < end; index++) {
            value = value[path[index]];
        }
        value[path[path.length - 1]] = new ObservableSet(value[path[path.length - 1]]);
    }
    /**
     * 集合元素个数
     */
    get size() {
        return this._value.size;
    }
    //#endregion
    //#region toJSON
    toJSON() {
        return this.serializable ? [...this._value] : undefined;
    }
    on(event, callback) {
        switch (event) {
            case 'add':
                this._onAdd.add(callback);
                break;
            case 'remove':
                this._onRemove.add(callback);
                break;
            default:
                super.on(event, callback);
                break;
        }
    }
    once(event, callback) {
        super.once(event, callback);
    }
    off(event, callback) {
        switch (event) {
            case 'add':
                callback ? this._onAdd.delete(callback) : this._onAdd.clear();
                break;
            case 'remove':
                callback ? this._onRemove.delete(callback) : this._onRemove.clear();
                break;
            default:
                super.off(event, callback);
                break;
        }
    }
    //#endregion
    //#region 集合修改操作方法
    /**
     * 用来清空一个 Set 对象中的所有元素。
     */
    clear() {
        if (this._onRemove.size > 0) {
            this._value.forEach(value => {
                this._value.delete(value);
                this._onRemove.forEach(callback => callback(value));
            });
        }
        else
            this._value.clear();
    }
    /**
     * 从一个 Set 对象中删除指定的元素。
     */
    delete(value) {
        if (this._onRemove.size > 0) {
            const result = this._value.delete(value);
            if (result)
                this._onRemove.forEach(callback => callback(value));
            return result;
        }
        else
            return this._value.delete(value);
    }
    /**
     * 用来向一个 Set 对象的末尾添加一个指定的值。
     */
    add(value) {
        if (this._onAdd.size > 0) {
            if (!this._value.has(value)) {
                this._value.add(value);
                this._onAdd.forEach(callback => callback(value));
            }
        }
        else
            this._value.add(value);
        return this;
    }
    //#endregion
    //#region 集合读取操作方法
    /**
     * 返回一个新的包含 [value, value] 对的 Iterator 对象，返回的迭代器的迭代顺序与 Set 对象的插入顺序相同。
     */
    entries() {
        return this._value.entries();
    }
    /**
     * 根据集合中元素的顺序，对每个元素都执行提供的 callback 函数一次。
     */
    forEach(callbackfn, thisArg) {
        this._value.forEach(callbackfn, thisArg);
    }
    /**
     * 返回一个布尔值来指示对应的值value是否存在Set对象中
     */
    has(value) {
        return this._value.has(value);
    }
    /**
     * 行为与 value 方法完全一致，返回 Set 对象的元素。
     */
    keys() {
        return this._value.keys();
    }
    /**
     * 返回一个 Iterator  对象，这个对象以插入Set 对象的顺序包含了原 Set 对象里的每个元素。
     */
    values() {
        return this._value.values();
    }
}
exports.ObservableSet = ObservableSet;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
